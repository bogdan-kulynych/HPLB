
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # SIMUlATION_4
> 
> ## saving paths
> PATH.SAVE = "../Data/"
> 
> ## requirements
> require(dWit)
Loading required package: dWit
Loading required package: data.table

Attaching package: ‘data.table’

The following object is masked from ‘package:sfsmisc’:

    last

Loading required package: distrEx
Loading required package: distr
Loading required package: startupmsg
:startupmsg>  Utilities for Start-Up Messages (version 0.9.6)
:startupmsg> 
:startupmsg>  For more information see ?"startupmsg",
:startupmsg>  NEWS("startupmsg")

:distr>  Object Oriented Implementation of Distributions (version
:distr>  2.8.0)
:distr> 
:distr>  Attention: Arithmetics on distribution objects are
:distr>  understood as operations on corresponding random variables
:distr>  (r.v.s); see distrARITH().
:distr> 
:distr>  Some functions from package 'stats' are intentionally masked
:distr>  ---see distrMASK().
:distr> 
:distr>  Note that global options are controlled by distroptions()
:distr>  ---c.f. ?"distroptions".
:distr> 
:distr>  For more information see ?"distr", NEWS("distr"), as well as
:distr>    http://distr.r-forge.r-project.org/
:distr>  Package "distrDoc" provides a vignette to this package as
:distr>  well as to several extension packages; try
:distr>  vignette("distr").


Attaching package: ‘distr’

The following objects are masked from ‘package:stats’:

    df, qqplot, sd

:distrEx>  Extensions of Package 'distr' (version 2.8.0)
:distrEx> 
:distrEx>  Note: Packages "e1071", "moments", "fBasics" should be
:distrEx>  attached /before/ package "distrEx". See
:distrEx>  distrExMASK().Note: Extreme value distribution
:distrEx>  functionality has been moved to
:distrEx> 
:distrEx>        package "RobExtremes". See distrExMOVED().
:distrEx> 
:distrEx>  For more information see ?"distrEx", NEWS("distrEx"), as
:distrEx>  well as
:distrEx>    http://distr.r-forge.r-project.org/
:distrEx>  Package "distrDoc" provides a vignette to this package
:distrEx>  as well as to several related packages; try
:distrEx>  vignette("distr").


Attaching package: ‘distrEx’

The following objects are masked from ‘package:stats’:

    IQR, mad, median, var

dWit 0.2.0
Type dWitNews() to see new features/changes/bug fixes.
> require(parallel)
Loading required package: parallel
> require(data.table)
> require(stats)
> require(ranger)
Loading required package: ranger
> require(MASS)
Loading required package: MASS
> require(reticulate)
Loading required package: reticulate
> 
> # Source mmd
> source('./helpers.R')
Loading required package: mvtnorm
> 
> 
> ## data generation & bayes ratio
> genMultiVar <- function(n, Sigma = diag(1, 3)) {
+   return(mvrnorm(n = n, mu = rep(0, nrow(Sigma)), Sigma = Sigma))
+ }
> genMultiVarT <- function(n, R = diag(1, 3), df = 3) {
+   return(rtcopula(n = n, R = R, df = 3))
+ }
> 
> 
> 
> # running simulations on clusters
> 
> # params sims
> cov1 <- diag(1, 3)
> cov2 <- diag(0.5, 3) + matrix(0.5, 3, 3)
> cov3 <- diag(1.5, 3) + matrix(-0.5, 3, 3)
> cov4 <- diag(0.9, 3) + matrix(0.1, 3, 3)
> R <- diag(1, 50)
> n <- 250
> nrep <- 100
> grid <- c(1:nrep)
> 
> 
> # running simulations
> set.seed(123, "L'Ecuyer")
> res1_1 <- mcmapply(FUN = function(r) {
+   y.train <- factor(c(rep(0,n), rep(1,n)))
+   x.train <- rbind(genMultiVar(n = n, cov1), genMultiVar(n = n, cov2))
+   y.test <- factor(c(rep(0,n), rep(1,n)))
+   x.test <- rbind(genMultiVar(n = n, cov1), genMultiVar(n = n, cov2))
+   rf <- ranger(y~., data = data.frame(y = y.train, x = x.train),classification = TRUE, probability = TRUE)
+   rho <- predict(rf, data = data.frame(x = x.test))$predictions[,"1"]
+   tvhat <- dWit(t = as.numeric(levels(y.test))[y.test], rho = rho, s = 0.5, estimator.type = "asymptotic-tv-search")$tvhat
+   #tvhat <- dWit(t = inputs$t, rho = inputs$rho, s = 0.5, estimator.type = "binomial")$tvhat
+   tvhat}, grid, mc.cores = 10)
> 
> set.seed(123, "L'Ecuyer")
> res2_1 <- mcmapply(FUN = function(r) {
+   y.train <- factor(c(rep(0,n), rep(1,n)))
+   x.train <- rbind(genMultiVar(n = n, cov1), genMultiVar(n = n, cov2))
+   y.test <- factor(c(rep(0,n), rep(1,n)))
+   x.test <- rbind(genMultiVar(n = n, cov1), genMultiVar(n = n, cov2))
+   rf <- ranger(y~., data = data.frame(y = y.train, x = x.train),classification = TRUE, probability = TRUE)
+   rho <- predict(rf, data = data.frame(x = x.test))$predictions[,"1"]
+   tvhat <- dWit(t = as.numeric(levels(y.test))[y.test], rho = rho, s = 0.5, estimator.type = "binomial-test")$tvhat
+   #tvhat <- dWit(t = inputs$t, rho = inputs$rho, s = 0.5, estimator.type = "binomial")$tvhat
+   tvhat}, grid, mc.cores = 10)
> 
> set.seed(123, "L'Ecuyer")
> res3_1 <- mcmapply(FUN = function(r) {
+   y.train <- factor(c(rep(0,n), rep(1,n)))
+   x.train <- rbind(genMultiVar(n = n, cov1), genMultiVar(n = n, cov2))
+   y.test <- factor(c(rep(0,n), rep(1,n)))
+   x.test <- rbind(genMultiVar(n = n, cov1), genMultiVar(n = n, cov2))
+   #rf <- ranger(y~., data = data.frame(y = y.train, x = x.train),classification = TRUE, probability = TRUE)
+   #rho <- predict(rf, data = data.frame(x = x.test))$predictions[,"1"]
+   f <- generateWitnessFunctionGaussianKernel(sample2 = x.train[1:n,], sample1 = x.train[-c(1:n),])
+   tvhat <- dWit(t = as.numeric(levels(y.test))[y.test], rho = apply(x.test, 1, function(x) f(x)), s = 0.5, estimator.type = "asymptotic-tv-search")$tvhat
+   #tvhat <- dWit(t = inputs$t, rho = inputs$rho, s = 0.5, estimator.type = "binomial")$tvhat
+   tvhat}, grid, mc.cores = 10)
> 
> # running simulations
> set.seed(123, "L'Ecuyer")
> res1_2 <- mcmapply(FUN = function(r) {
+   y.train <- factor(c(rep(0,n), rep(1,n)))
+   x.train <- rbind(genMultiVar(n = n, cov1), genMultiVar(n = n, cov3))
+   y.test <- factor(c(rep(0,n), rep(1,n)))
+   x.test <- rbind(genMultiVar(n = n, cov1), genMultiVar(n = n, cov3))
+   rf <- ranger(y~., data = data.frame(y = y.train, x = x.train),classification = TRUE, probability = TRUE)
+   rho <- predict(rf, data = data.frame(x = x.test))$predictions[,"1"]
+   tvhat <- dWit(t = as.numeric(levels(y.test))[y.test], rho = rho, s = 0.5, estimator.type = "asymptotic-tv-search")$tvhat
+   #tvhat <- dWit(t = inputs$t, rho = inputs$rho, s = 0.5, estimator.type = "binomial")$tvhat
+   tvhat}, grid, mc.cores = 10)
> 
> set.seed(123, "L'Ecuyer")
> res2_2 <- mcmapply(FUN = function(r) {
+   y.train <- factor(c(rep(0,n), rep(1,n)))
+   x.train <- rbind(genMultiVar(n = n, cov1), genMultiVar(n = n, cov3))
+   y.test <- factor(c(rep(0,n), rep(1,n)))
+   x.test <- rbind(genMultiVar(n = n, cov1), genMultiVar(n = n, cov3))
+   rf <- ranger(y~., data = data.frame(y = y.train, x = x.train),classification = TRUE, probability = TRUE)
+   rho <- predict(rf, data = data.frame(x = x.test))$predictions[,"1"]
+   tvhat <- dWit(t = as.numeric(levels(y.test))[y.test], rho = rho, s = 0.5, estimator.type = "binomial-test")$tvhat
+   #tvhat <- dWit(t = inputs$t, rho = inputs$rho, s = 0.5, estimator.type = "binomial-test")$tvhat
+   tvhat}, grid, mc.cores = 10)
> 
> set.seed(123, "L'Ecuyer")
> res3_2 <- mcmapply(FUN = function(r) {
+   y.train <- factor(c(rep(0,n), rep(1,n)))
+   x.train <- rbind(genMultiVar(n = n, cov1), genMultiVar(n = n, cov3))
+   y.test <- factor(c(rep(0,n), rep(1,n)))
+   x.test <- rbind(genMultiVar(n = n, cov1), genMultiVar(n = n, cov3))
+   #rf <- ranger(y~., data = data.frame(y = y.train, x = x.train),classification = TRUE, probability = TRUE)
+   #rho <- predict(rf, data = data.frame(x = x.test))$predictions[,"1"]
+   f <- generateWitnessFunctionGaussianKernel(sample2 = x.train[1:n,], sample1 = x.train[-c(1:n),])
+   tvhat <- dWit(t = as.numeric(levels(y.test))[y.test], rho = apply(x.test, 1, function(x) f(x)), s = 0.5, estimator.type = "asymptotic-tv-search")$tvhat
+   #tvhat <- dWit(t = inputs$t, rho = inputs$rho, s = 0.5, estimator.type = "binomial")$tvhat
+   tvhat}, grid, mc.cores = 10)
> 
> # running simulations
> set.seed(123, "L'Ecuyer")
> res1_3 <- mcmapply(FUN = function(r) {
+   y.train <- factor(c(rep(0,n), rep(1,n)))
+   x.train <- rbind(genMultiVar(n = n, cov1), genMultiVar(n = n, cov4))
+   y.test <- factor(c(rep(0,n), rep(1,n)))
+   x.test <- rbind(genMultiVar(n = n, cov1), genMultiVar(n = n, cov4))
+   rf <- ranger(y~., data = data.frame(y = y.train, x = x.train),classification = TRUE, probability = TRUE)
+   rho <- predict(rf, data = data.frame(x = x.test))$predictions[,"1"]
+   tvhat <- dWit(t = as.numeric(levels(y.test))[y.test], rho = rho, s = 0.5, estimator.type = "asymptotic-tv-search")$tvhat
+   #tvhat <- dWit(t = inputs$t, rho = inputs$rho, s = 0.5, estimator.type = "binomial")$tvhat
+   tvhat}, grid, mc.cores = 10)
> 
> set.seed(123, "L'Ecuyer")
> res2_3 <- mcmapply(FUN = function(r) {
+   y.train <- factor(c(rep(0,n), rep(1,n)))
+   x.train <- rbind(genMultiVar(n = n, cov1), genMultiVar(n = n, cov4))
+   y.test <- factor(c(rep(0,n), rep(1,n)))
+   x.test <- rbind(genMultiVar(n = n, cov1), genMultiVar(n = n, cov4))
+   rf <- ranger(y~., data = data.frame(y = y.train, x = x.train),classification = TRUE, probability = TRUE)
+   rho <- predict(rf, data = data.frame(x = x.test))$predictions[,"1"]
+   tvhat <- dWit(t = as.numeric(levels(y.test))[y.test], rho = rho, s = 0.5, estimator.type = "binomial-test")$tvhat
+   #tvhat <- dWit(t = inputs$t, rho = inputs$rho, s = 0.5, estimator.type = "binomial")$tvhat
+   tvhat}, grid, mc.cores = 10)
> 
> set.seed(123, "L'Ecuyer")
> res3_3 <- mcmapply(FUN = function(r) {
+   y.train <- factor(c(rep(0,n), rep(1,n)))
+   x.train <- rbind(genMultiVar(n = n, cov1), genMultiVar(n = n, cov4))
+   y.test <- factor(c(rep(0,n), rep(1,n)))
+   x.test <- rbind(genMultiVar(n = n, cov1), genMultiVar(n = n, cov4))
+   #rf <- ranger(y~., data = data.frame(y = y.train, x = x.train),classification = TRUE, probability = TRUE)
+   #rho <- predict(rf, data = data.frame(x = x.test))$predictions[,"1"]
+   f <- generateWitnessFunctionGaussianKernel(sample2 = x.train[1:n,], sample1 = x.train[-c(1:n),])
+   tvhat <- dWit(t = as.numeric(levels(y.test))[y.test], rho = apply(x.test, 1, function(x) f(x)), s = 0.5, estimator.type = "asymptotic-tv-search")$tvhat
+   #tvhat <- dWit(t = inputs$t, rho = inputs$rho, s = 0.5, estimator.type = "binomial")$tvhat
+   tvhat}, grid, mc.cores = 10)
> 
> 
> 
> 
> 
> 
> ##################### T copula ##########################################
> set.seed(123, "L'Ecuyer")
> res4 <- mcmapply(FUN = function(r) {
+   y.train <- factor(c(rep(0,n), rep(1,n)))
+   x.train <- rbind(genMultiVar(n = n, R), genMultiVarT(n = n, R))
+   y.test <- factor(c(rep(0,n), rep(1,n)))
+   x.test <- rbind(genMultiVar(n = n, R), genMultiVarT(n = n, R))
+   #rf <- ranger(y~., data = data.frame(y = y.train, x = x.train),classification = TRUE, probability = TRUE)
+   #rho <- predict(rf, data = data.frame(x = x.test))$predictions[,"1"]
+   f <- generateWitnessFunctionGaussianKernel(sample2 = x.train[1:n,], sample1 = x.train[-c(1:n),])
+   tvhat <- dWit(t = as.numeric(levels(y.test))[y.test], rho = apply(x.test, 1, function(x) f(x)), s = 0.5, estimator.type = "empirical-tv-search")$tvhat
+   #tvhat <- dWit(t = as.numeric(levels(y.test))[y.test], rho = apply(x.test, 1, function(x) f(x)), s = 0.5, estimator.type = "asymptotic-tv-search")$tvhat
+   #tvhat <- dWit(t = inputs$t, rho = inputs$rho, s = 0.5, estimator.type = "binomial")$tvhat
+   tvhat}, grid, mc.cores = 10)
> 
> set.seed(123, "L'Ecuyer")
> res5 <- mcmapply(FUN = function(r) {
+   y.train <- factor(c(rep(0,n), rep(1,n)))
+   x.train <- rbind(genMultiVar(n = n, R), genMultiVarT(n = n, R))
+   y.test <- factor(c(rep(0,n), rep(1,n)))
+   x.test <- rbind(genMultiVar(n = n, R), genMultiVarT(n = n, R))
+   #rf <- ranger(y~., data = data.frame(y = y.train, x = x.train),classification = TRUE, probability = TRUE)
+   #rho <- predict(rf, data = data.frame(x = x.test))$predictions[,"1"]
+   rf <- ranger(y~., data = data.frame(y = y.train, x = x.train),classification = TRUE, probability = TRUE)
+   rho <- predict(rf, data = data.frame(x = x.test))$predictions[,"1"]
+   tvhat <- dWit(t = as.numeric(levels(y.test))[y.test], rho = rho, s = 0.5, estimator.type = "empirical-tv-search")$tvhat
+   #tvhat <- dWit(t = as.numeric(levels(y.test))[y.test], rho = rho, s = 0.5, estimator.type = "asymptotic-tv-search")$tvhat
+   #tvhat <- dWit(t = inputs$t, rho = inputs$rho, s = 0.5, estimator.type = "binomial")$tvhat
+   tvhat}, grid, mc.cores = 10)
> 
> set.seed(123, "L'Ecuyer")
> res6 <- mcmapply(FUN = function(r) {
+   y.train <- factor(c(rep(0,n), rep(1,n)))
+   x.train <- rbind(genMultiVar(n = n, R), genMultiVarT(n = n, R))
+   y.test <- factor(c(rep(0,n), rep(1,n)))
+   x.test <- rbind(genMultiVar(n = n, R), genMultiVarT(n = n, R))
+   #rf <- ranger(y~., data = data.frame(y = y.train, x = x.train),classification = TRUE, probability = TRUE)
+   #rho <- predict(rf, data = data.frame(x = x.test))$predictions[,"1"]
+   rf <- ranger(y~., data = data.frame(y = y.train, x = x.train),classification = TRUE, probability = TRUE)
+   rho <- predict(rf, data = data.frame(x = x.test))$predictions[,"1"]
+   tvhat <- dWit(t = as.numeric(levels(y.test))[y.test], rho = rho, s = 0.5, estimator.type = "binomial-test")$tvhat
+   #tvhat <- dWit(t = inputs$t, rho = inputs$rho, s = 0.5, estimator.type = "binomial")$tvhat
+   tvhat}, grid, mc.cores = 10)
> 
> #set.seed(123, "L'Ecuyer")
> #res4 <- mcmapply(FUN = function(r) {
> #  y.train <- factor(c(rep(0,n), rep(1,n)))
> #  x.train <- rbind(genMultiVar(n = n, cov1), genMultiVar(n = n, cov2))
> #  y.test <- factor(c(rep(0,n), rep(1,n)))
> #  x.test <- rbind(genMultiVar(n = n, cov1), genMultiVar(n = n, cov2))
> #  #rf <- ranger(y~., data = data.frame(y = y.train, x = x.train),classification = TRUE, probability = TRUE)
> 3  #rho <- predict(rf, data = data.frame(x = x.test))$predictions[,"1"]
[1] 3
> #  f <- generateWitnessFunctionGaussianKernel(sample2 = x.train[1:n,], sample1 = x.train[-c(1:n),])
> #  tvhat <- dWit(t = as.numeric(levels(y.test))[y.test], rho = apply(x.test, 1, function(x) f(x)), s = 0.5, estimator.type = "binomial")$tvhat
> #  #tvhat <- dWit(t = inputs$t, rho = inputs$rho, s = 0.5, estimator.type = "binomial")$tvhat
> #  tvhat}, grid, mc.cores = 10)
> 
> # gathering data
> power.table.cor1 <- data.table(rep     = grid,
+                           tvhat_search_rf = res1_1,
+                           tvhat_search_mmd = res3_1,
+                           tvhat_binomial_rf = res2_1)
> power.table.cor2 <- data.table(rep     = grid,
+                           tvhat_search_rf = res1_2,
+                           tvhat_search_mmd = res3_2,
+                           tvhat_binomial_rf = res2_2)
> power.table.cor3 <- data.table(rep     = grid,
+                           tvhat_search_rf = res1_3,
+                           tvhat_search_mmd = res3_3,
+                           tvhat_binomial_rf = res2_3)
> power.table.r <- data.table(rep     = grid,
+                           tvhat_search_rf = res5,
+                           tvhat_search_mmd = res4,
+                           tvhat_binomial_rf = res6)
> 
> # saving results of simulations
> save(power.table.cor1, power.table.cor2, power.table.cor3,  power.table.r, file = paste0(PATH.SAVE, "DATA_SIMULATION_4.Rdata"))
> 
> proc.time()
    user   system  elapsed 
6874.003  134.528 3126.368 
